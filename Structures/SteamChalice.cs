using MoTools.Tiles;
using Terraria;
using Terraria.ModLoader;

namespace MoTools.Structures
{
    public class SteamChalice
    {
        private static readonly int[,] _structureArray = new int[,]
        {
            {0,0,0,0,0,0,0,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0},
            {0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0},
            {0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0},
            {0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0},
            {0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0},
            {0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0},
            {0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,2,2,2,9,9,9,9,0,0,0},
            {0,9,9,9,9,1,2,2,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,2,2,9,9,9,9,9,0,0,0},
            {9,9,9,9,9,2,2,2,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,2,1,1,2,9,9,9,9,9,9,9,0,0},
            {9,9,9,9,9,9,2,2,2,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,2,2,2,2,1,2,9,9,9,9,9,9,9,0,0},
            {9,9,9,9,9,9,9,2,2,2,2,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,2,2,2,1,2,2,9,9,9,9,9,9,9,9,0,0},
            {9,9,9,9,9,9,9,9,9,2,2,2,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,2,2,1,2,2,9,9,9,9,9,9,9,9,9,0,0},
            {9,9,9,9,9,9,9,9,9,9,2,2,4,4,4,3,3,3,4,4,4,4,3,4,4,3,3,4,4,4,2,2,2,2,9,9,9,9,9,9,9,9,9,9,0,0},
            {9,9,9,9,9,9,9,9,9,9,9,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0},
            {9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0},
            {9,9,9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,2,2,2,4,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0},
            {9,9,9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0},
            {9,9,9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0},
            {9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0},
            {9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0},
            {9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0},
            {0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,2,2,1,1,2,2,2,2,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0},
            {0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,2,2,1,2,1,2,2,2,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0},
            {0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,2,1,1,1,2,2,2,2,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0},
            {0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0},
            {0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0},
            {0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0},
            {0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0},
            {0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0},
            {0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,1,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0},
            {0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,1,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0},
            {0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,1,2,2,2,2,2,2,2,2,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0},
            {0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,1,2,2,2,2,2,2,2,2,2,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0},
            {0,0,0,0,0,9,9,9,9,9,9,9,9,9,1,2,2,2,2,2,2,2,2,2,2,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0},
            {0,0,0,0,0,0,9,9,9,9,9,9,9,9,1,2,2,2,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,0,0},
            {0,0,0,0,0,0,0,9,9,9,9,9,9,1,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,1,0,0,0},
            {0,0,0,0,0,0,0,0,9,9,9,9,1,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,1,1,1,0,0,0},
            {0,0,0,0,0,0,2,2,9,9,2,2,1,2,2,1,1,1,1,1,2,2,1,2,2,2,2,1,2,2,2,2,2,3,1,3,1,3,1,1,1,1,1,0,0,0},
            {0,0,0,0,0,2,2,2,2,2,2,2,2,1,2,1,1,1,1,1,2,1,1,2,1,2,2,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0},
            {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
            {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},

        };

        public static void StructureGen(int xPosO, int yPosO, bool mirrored)
        {
            //Steam Heart
            /**
             * 0 = Do Nothing
             * 1 = Steam Rock
             * 2 = Steam Brick
             * 3 = Lava
             * 4 = Steam Ore
             * 9 = Kill tile
             * */
            

            for (int i = 0; i < _structureArray.GetLength(1); i++)
            {
                for (int j = 0; j < _structureArray.GetLength(0); j++)
                {
                    if(mirrored)
                    {
                        if (TileCheckSafe((int)(xPosO + _structureArray.GetLength(1) - i), (int)(yPosO + j)))
                        {
                            if (_structureArray[j, i] == 1)
                            {
                                WorldGen.KillTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j);
                                WorldGen.PlaceTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j, ModContent.TileType<Tiles.SteamRock>(), true, true);
                            }
                            if (_structureArray[j, i] == 2)
                            {
                                WorldGen.KillTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j);
                                WorldGen.PlaceTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j, 56, true, true);
                            }
                            if (_structureArray[j, i] == 3)
                            {
                                WorldGen.KillTile(xPosO + i, yPosO + j);
                                Main.tile[xPosO + _structureArray.GetLength(1) - i, yPosO + j].lava(true);
                                Main.tile[xPosO + _structureArray.GetLength(1) - i, yPosO + j].liquid = 255;
                            }
                            if (_structureArray[j, i] == 4)
                            {
                                WorldGen.KillTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j);
                                WorldGen.PlaceTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j, ModContent.TileType<SteamOreBlock>(), true, true);
                            }
                            if (_structureArray[j, i] == 9)
                            {
                                WorldGen.KillTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j);
                            }
                        }
                    }
                    else
                    {
                        if (TileCheckSafe((int)(xPosO + i), (int)(yPosO + j)))
                        {
                            if (_structureArray[j, i] == 1)
                            {
                                WorldGen.KillTile(xPosO + i, yPosO + j);
                                WorldGen.PlaceTile(xPosO + i, yPosO + j, ModContent.TileType<Tiles.SteamRock>(), true, true);
                            }
                            if (_structureArray[j, i] == 2)
                            {
                                WorldGen.KillTile(xPosO + i, yPosO + j);
                                WorldGen.PlaceTile(xPosO + i, yPosO + j, 56, true, true);
                            }
                            if (_structureArray[j, i] == 3)
                            {
                                WorldGen.KillTile(xPosO + i, yPosO + j);
                                Main.tile[xPosO + i, yPosO + j].lava(true);
                                Main.tile[xPosO + i, yPosO + j].liquid = 255;
                            }
                            if (_structureArray[j, i] == 4)
                            {
                                WorldGen.KillTile(xPosO + i, yPosO + j);
                                WorldGen.PlaceTile(xPosO + i, yPosO + j, ModContent.TileType<SteamOreBlock>(), true, true);
                            }
                            if (_structureArray[j, i] == 9)
                            {
                                WorldGen.KillTile(xPosO + i, yPosO + j);
                            }
                        }
                    }
                }
            }
        }
        
        //Making sure tiles arent out of bounds
        private static bool TileCheckSafe(int i, int j)
        {
            if (i > 0 && i < Main.maxTilesX && j > 0 && j < Main.maxTilesY)
                return true;
            return false;
        }
    }
}